import 'dart:async';
import 'dart:convert';

import 'package:build/build.dart';

Map flatten(Map map) {
  Map result = {};
  map.forEach((key, value) {
    if (value is Map) {
      Map flattened = flatten(value);
      flattened.forEach((key2, value2) {
        result[key + '.' + key2] = value2;
      });
    } else {
      result[key] = value;
    }
  });
  return result;
}

class InternationalizationBuilder extends Builder {
  @override
  FutureOr<void> build(BuildStep buildStep) async {
    // read file from assets/en_us.json
    Map<String, dynamic> json = jsonDecode(await buildStep.readAsString(AssetId(buildStep.inputId.package, 'assets/en_us.json')));
    Map flattened = flatten(json);
    // write file to lib/i18n/internationalization_keys.dart
    StringBuffer buffer = StringBuffer();
    buffer.writeln('// This file is generated by internationalization_builder.dart');
    buffer.writeln('// Do not edit this file');
    buffer.writeln('import \'package:nodeflow/i18n/internationalization.dart\';');
    buffer.writeln();
    buffer.writeln('class I18n {');
    buffer.writeln('  static final Intl empty = Intl(\'\');');
    flattened.forEach((key, value) {
      // replace "." in keys to "_"
      String path = key.replaceAll('.', '_');
      buffer.writeln('  static Intl get $path =>  Intl.get(\'$key\');');
    });
    buffer.writeln('}');
    await buildStep.writeAsString(AssetId(buildStep.inputId.package, 'lib/i18n/internationalization_keys.dart'), buffer.toString());
  }

  @override
  Map<String, List<String>> get buildExtensions => const {
        'assets/en_us.json': ['lib/i18n/internationalization_keys.dart']
      };
}
